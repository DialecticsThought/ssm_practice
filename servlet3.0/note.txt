Shared libraries共享库 / runtimes pluggability 运行时插件

1.servlet容器启动时候 会扫描 当前应用里面的每一个jar包

2.提供ServletContainerInitializer的实现类
    必须绑定在 META-INF/services/javax.servlet.ServletContainerInitializer

总结：
   1 当servlet容器时 所扫描应用里面的每一个jar包里面是不是有
            /META-INF/services/javax.servlet.ServletContainerInitializer 这个文件
    maven是放在resources文件夹下面

   2 指定的实现类 启动并运行这个实现类的方法 传入类型
    eg：
        //容器启动的时候 会将@HandlesTypes指定的类型 以及子类 实现类 全部传递进来
        @HandlesTypes(value = {HelloService.class})
        public class MyServletContainerInitializer implements ServletContainerInitializer

   3 Spring应用已启动会加载到WebApplicationInitializer接口下的所有继承类的组件

   4.并且为WebApplicationInitializer组件创建对象（排除接口 抽象类）
        WebApplicationInitializer的子类
            1.AbstractContextLoaderInitializer
                有一个方法registerContextLoaderListener(servletContext)
                这个方法会执行WebApplicationContext rootAppContext = createRootApplicationContext();

            2.AbstractDispatcherServletInitializer
                有一个方法registerContextLoaderListener(servletContext)
                    1.这个个方法会执行WebApplicationContext servletAppContext = createServletApplicationContext();
                    也就是创建ioc容器☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
                    2.也会执行FrameworkServlet dispatcherServlet = createDispatcherServlet(servletAppContext);
                    创建dispatcherServlet
                    3.把创建的dispatcherServlet添加到servletContext中
                    ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet);
                    4.然后执行
                        registration.setLoadOnStartup(1);
                        registration.addMapping(getServletMappings());
                            getServletMappings()是空的 为了让程序员自定义
                        registration.setAsyncSupported(isAsyncSupported());
            3. AbstractAnnotationConfigDispatcherServletInitializer 注解方式配置的DispatcherServlet初始化器

                1.也会执行创建根容器 基于父类的重写createRootApplicationContext()
                    1.得到配置类 而不是配置文件Class<?>[] configClasses = getRootConfigClasses();
                        getRootConfigClasses()是抽象的 程序员自定义

                2.创建web的ioc容器createServletApplicationContext()
                    1.也是得到配置类Class<?>[] configClasses = getServletConfigClasses();
                         getRootConfigClasses()是抽象的 程序员自定义

总结
    已注解方式启动SpringMVC 继承AbstractAnnotationConfigDispatcherServletInitializer
    实现抽象方法 指定DispatcherServlet的配置信息